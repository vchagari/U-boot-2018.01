/*
 * (C) Copyright 2000-2010
 * Wolfgang Denk, DENX Software Engineering, wd@denx.de.
 *
 * (C) Copyright 2001 Sysgo Real-Time Solutions, GmbH <www.elinos.com>
 * Andreas Heppel <aheppel@sysgo.de>
 *
 * (C) Copyright 2008 Atmel Corporation
 *
 * SPDX-License-Identifier:	GPL-2.0+
 */
#include <common.h>
#include <environment.h>
#include <malloc.h>
#include <spi.h>
#include <spi_flash.h>
#include <search.h>
#include <errno.h>
#include <dm/device-internal.h>
#include <stdlib.h>

#ifndef CONFIG_ENV_SPI_BUS
# define CONFIG_ENV_SPI_BUS	CONFIG_SF_DEFAULT_BUS
#endif
#ifndef CONFIG_ENV_SPI_CS
# define CONFIG_ENV_SPI_CS	CONFIG_SF_DEFAULT_CS
#endif
#ifndef CONFIG_ENV_SPI_MAX_HZ
# define CONFIG_ENV_SPI_MAX_HZ	CONFIG_SF_DEFAULT_SPEED
#endif
#ifndef CONFIG_ENV_SPI_MODE
# define CONFIG_ENV_SPI_MODE	CONFIG_SF_DEFAULT_MODE
#endif

#ifdef CONFIG_ENV_OFFSET_REDUND
static ulong env_offset		= CONFIG_ENV_OFFSET;
static ulong env_new_offset	= CONFIG_ENV_OFFSET_REDUND;

#define ACTIVE_FLAG	1
#define OBSOLETE_FLAG	0
#endif /* CONFIG_ENV_OFFSET_REDUND */

DECLARE_GLOBAL_DATA_PTR;

char *env_name_spec = "SPI Flash";

static struct spi_flash *env_flash;

#if defined(CONFIG_ENV_OFFSET_REDUND)
int saveenv(void)
{
	env_t	env_new;
	char	*saved_buffer = NULL, flag = OBSOLETE_FLAG;
	u32	saved_size, saved_offset, sector = 1;
	int	ret;

#ifdef CONFIG_DM_SPI_FLASH
	struct udevice *new;

	/* speed and mode will be read from DT */
	ret = spi_flash_probe_bus_cs(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
				     0, 0, &new);
	if (ret) {
		set_default_env("!spi_flash_probe_bus_cs() failed");
		return 1;
	}

	env_flash = dev_get_uclass_priv(new);
#else

	if (!env_flash) {
		env_flash = spi_flash_probe(CONFIG_ENV_SPI_BUS,
			CONFIG_ENV_SPI_CS,
			CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
		if (!env_flash) {
			set_default_env("!spi_flash_probe() failed");
			return 1;
		}
	}
#endif

	ret = env_export(&env_new);
	if (ret)
		return ret;
	env_new.flags	= ACTIVE_FLAG;

	if (gd->env_valid == 1) {
		env_new_offset = CONFIG_ENV_OFFSET_REDUND;
		env_offset = CONFIG_ENV_OFFSET;
	} else {
		env_new_offset = CONFIG_ENV_OFFSET;
		env_offset = CONFIG_ENV_OFFSET_REDUND;
	}

	/* Is the sector larger than the env (i.e. embedded) */
	if (CONFIG_ENV_SECT_SIZE > CONFIG_ENV_SIZE) {
		saved_size = CONFIG_ENV_SECT_SIZE - CONFIG_ENV_SIZE;
		saved_offset = env_new_offset + CONFIG_ENV_SIZE;
		saved_buffer = memalign(ARCH_DMA_MINALIGN, saved_size);
		if (!saved_buffer) {
			ret = 1;
			goto done;
		}
		ret = spi_flash_read(env_flash, saved_offset,
					saved_size, saved_buffer);
		if (ret)
			goto done;
	}

	if (CONFIG_ENV_SIZE > CONFIG_ENV_SECT_SIZE) {
		sector = CONFIG_ENV_SIZE / CONFIG_ENV_SECT_SIZE;
		if (CONFIG_ENV_SIZE % CONFIG_ENV_SECT_SIZE)
			sector++;
	}

	puts("Erasing SPI flash...");
	ret = spi_flash_erase(env_flash, env_new_offset,
				sector * CONFIG_ENV_SECT_SIZE);
	if (ret)
		goto done;

	puts("Writing to SPI flash...");

	ret = spi_flash_write(env_flash, env_new_offset,
		CONFIG_ENV_SIZE, &env_new);
	if (ret)
		goto done;

	if (CONFIG_ENV_SECT_SIZE > CONFIG_ENV_SIZE) {
		ret = spi_flash_write(env_flash, saved_offset,
					saved_size, saved_buffer);
		if (ret)
			goto done;
	}

	ret = spi_flash_write(env_flash, env_offset + offsetof(env_t, flags),
				sizeof(env_new.flags), &flag);
	if (ret)
		goto done;

	puts("done\n");

	gd->env_valid = gd->env_valid == 2 ? 1 : 2;

	printf("Valid environment: %d\n", (int)gd->env_valid);

 done:
	if (saved_buffer)
		free(saved_buffer);

	return ret;
}

void env_relocate_spec(void)
{
	int ret;
	int crc1_ok = 0, crc2_ok = 0;
	env_t *tmp_env1 = NULL;
	env_t *tmp_env2 = NULL;
	env_t *ep = NULL;

	//TODO:Remove
	printf("First ENV_RELOCATE_SPEC\n");
	
	tmp_env1 = (env_t *)memalign(ARCH_DMA_MINALIGN,
			CONFIG_ENV_SIZE);
	tmp_env2 = (env_t *)memalign(ARCH_DMA_MINALIGN,
			CONFIG_ENV_SIZE);
	if (!tmp_env1 || !tmp_env2) {
		set_default_env("!malloc() failed");
		goto out;
	}

	env_flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
			CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
	if (!env_flash) {
		set_default_env("!spi_flash_probe() failed");
		goto out;
	}

	ret = spi_flash_read(env_flash, CONFIG_ENV_OFFSET,
				CONFIG_ENV_SIZE, tmp_env1);
	if (ret) {
		set_default_env("!spi_flash_read() failed");
		goto err_read;
	}

	if (crc32(0, tmp_env1->data, ENV_SIZE) == tmp_env1->crc)
		crc1_ok = 1;

	ret = spi_flash_read(env_flash, CONFIG_ENV_OFFSET_REDUND,
				CONFIG_ENV_SIZE, tmp_env2);
	if (!ret) {
		if (crc32(0, tmp_env2->data, ENV_SIZE) == tmp_env2->crc)
			crc2_ok = 1;
	}

	if (!crc1_ok && !crc2_ok) {
		set_default_env("!bad CRC");
		goto err_read;
	} else if (crc1_ok && !crc2_ok) {
		gd->env_valid = 1;
	} else if (!crc1_ok && crc2_ok) {
		gd->env_valid = 2;
	} else if (tmp_env1->flags == ACTIVE_FLAG &&
		   tmp_env2->flags == OBSOLETE_FLAG) {
		gd->env_valid = 1;
	} else if (tmp_env1->flags == OBSOLETE_FLAG &&
		   tmp_env2->flags == ACTIVE_FLAG) {
		gd->env_valid = 2;
	} else if (tmp_env1->flags == tmp_env2->flags) {
		gd->env_valid = 1;
	} else if (tmp_env1->flags == 0xFF) {
		gd->env_valid = 1;
	} else if (tmp_env2->flags == 0xFF) {
		gd->env_valid = 2;
	} else {
		/*
		 * this differs from code in env_flash.c, but I think a sane
		 * default path is desirable.
		 */
		gd->env_valid = 1;
	}

	if (gd->env_valid == 1)
		ep = tmp_env1;
	else
		ep = tmp_env2;

	ret = env_import((char *)ep, 0);
	if (!ret) {
		error("Cannot import environment: errno = %d\n", errno);
		set_default_env("!env_import failed");
	}

err_read:
	spi_flash_free(env_flash);
	env_flash = NULL;
out:
	free(tmp_env1);
	free(tmp_env2);
}
#else
int saveenv(void)
{
	u32	saved_size, saved_offset, sector = 1;
	char	*saved_buffer = NULL;
	int	ret = 1;
	env_t	env_new;

	//TODO:REMOVE
	char *tempbuf = NULL;

	//TODO:REMOVE
	printf("\n In second Saveenv \n");
	printf("\n ENV_SIZE:0x%X\n",ENV_SIZE);
	//printf("\n CONFIG_SYS_REDUNDAND_ENVIRONMENT:%d\n", 
	//	CONFIG_SYS_REDUNDAND_ENVIRONMENT);

#ifdef CONFIG_DM_SPI_FLASH
	struct udevice *new;

	/* speed and mode will be read from DT */
	ret = spi_flash_probe_bus_cs(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
				     0, 0, &new);
	if (ret) {
		set_default_env("!spi_flash_probe_bus_cs() failed");
		return 1;
	}

	env_flash = dev_get_uclass_priv(new);
#else

	if (!env_flash) {
		env_flash = spi_flash_probe(CONFIG_ENV_SPI_BUS,
			CONFIG_ENV_SPI_CS,
			CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
		if (!env_flash) {
			set_default_env("!spi_flash_probe() failed");
			return 1;
		}
	}
#endif

	/* Is the sector larger than the env (i.e. embedded) */
	if (CONFIG_ENV_SECT_SIZE > CONFIG_ENV_SIZE) {
		saved_size = CONFIG_ENV_SECT_SIZE - CONFIG_ENV_SIZE;
		saved_offset = CONFIG_ENV_OFFSET + CONFIG_ENV_SIZE;
		saved_buffer = malloc(saved_size);
		if (!saved_buffer)
			goto done;

		ret = spi_flash_read(env_flash, saved_offset,
			saved_size, saved_buffer);
		if (ret)
			goto done;
	}

	if (CONFIG_ENV_SIZE > CONFIG_ENV_SECT_SIZE) {
		sector = CONFIG_ENV_SIZE / CONFIG_ENV_SECT_SIZE;
		if (CONFIG_ENV_SIZE % CONFIG_ENV_SECT_SIZE)
			sector++;
	}

	ret = env_export(&env_new);
	if (ret)
		goto done;

	puts("Erasing SPI flash...");

	//TODO:DEBUG remove
	printf("\n CONFIG_ENV_OFFSET:0x%X\n sector:%d\n CONFIG_ENV_SECT_SIZE:0x%X\n CONFIG_ENV_SIZE:0x%X\n", CONFIG_ENV_OFFSET, sector, CONFIG_ENV_SECT_SIZE, CONFIG_ENV_SIZE );

	ret = spi_flash_erase(env_flash, CONFIG_ENV_OFFSET,
		sector * CONFIG_ENV_SECT_SIZE);
	if (ret)
		goto done;

	puts("Writing to SPI flash...");

	//TODO:REMOVE
	printf("env_new->data[%d] = {\n", CONFIG_ENV_SIZE);
	printf("CRC:0x%X\n", env_new.crc);
	for(int i = 0; i < 4100; ++i) {
		printf("0x%X ", env_new.data[i]);
		if ((i > 0) && (i % 16) == 0) {
			printf("\n");
		}
	}

	ret = spi_flash_write(env_flash, CONFIG_ENV_OFFSET,
		CONFIG_ENV_SIZE, &env_new);
	if (ret)
		goto done;

	udelay(10000);

	/* TODO: Remove */
	tempbuf = malloc(CONFIG_ENV_SIZE);
	if(!tempbuf)
		goto done;

	//TODO:REMOVE
	ret = spi_flash_read(env_flash, CONFIG_ENV_OFFSET,
			CONFIG_ENV_SIZE, tempbuf);
	if (ret)
		goto done;
	
	printf("\n\nSPI FLASH READ\n");
	for(int i = 0; i < 4100 ; ++i) {
		printf("0x%X ", tempbuf[i]);
		if ((i > 0) && (i % 16) == 0) {
			printf("\n");
		}
	}

	for (int i = 0; i < 4100; ++i) {
		if (tempbuf[i + 4] != env_new.data[i]) {
			printf("Read FLASH DATA MISMATCH\ntempbuf[%d]=0x%X\nenv_new.data[%d]=0x%X\n", i, tempbuf[i], i, env_new.data[i]);
		}
	}

	if (CONFIG_ENV_SECT_SIZE > CONFIG_ENV_SIZE) {
		ret = spi_flash_write(env_flash, saved_offset,
			saved_size, saved_buffer);
		if (ret)
			goto done;
	}

	ret = 0;
	puts("done\n");

 done:
	if (saved_buffer)
		free(saved_buffer);
	/*TODO: Remove */
	if (tempbuf)
		free(tempbuf);

	return ret;
}

//TODO: Remove below api's
static int fill_data_buf(unsigned char *buf, int len)
{
	//I Assumed data value < 255
	for (int i = 0; i < len; ++i) {
		buf[i] = i;
	}

	return 0;
}

static int data_buf_compare(unsigned char *buf1, unsigned char * buf2, int len) 
{	
	for (int i = 0; i < len; ++i) {
		if ( buf1[i] != buf2[i]) {
			printf("Data buffers not Equal!!\n");
			return -1; 
		}	
	}	
	printf("Data buffers are Equal");

	return 0;
}

void print_buf(unsigned char *buf, int len, char *info) 
{
	printf("\n%s\n",info);
	for (int i = 0; i < len; ++i) {
		if ((i > 0) && ((i % 8) == 0)) {
			printf("\n");
		}
		printf("0x%02X ", buf[i]); 	
	}
}

static int test_spi_flash(void)
{
	int ret;
	unsigned char writebuf[256] = {0};
	unsigned char readbuf[256] = {0};
	size_t len = 0x100; /* 256 bytes */
	u32 offset = 0x6C0000;
	struct udevice *new;

	/* speed and mode will be read from DT */
	ret = spi_flash_probe_bus_cs(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS, 0, 0, &new);
	if (ret) {	
		printf("SPI FLASH INIT FAILED\n");
		return -1;
	}
	env_flash = dev_get_uclass_priv(new);

	printf("\nSPI Configuration:\nSPI BUS:%d\nSPI CS:%d\n" \
		"SPI MAX HZ:%d\nSPI MODE:%ld\n", CONFIG_ENV_SPI_BUS, \
		CONFIG_ENV_SPI_CS, CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);

#if 0
	// call to flash erase api returns error
	ret = spi_flash_erase(env_flash, offset, 2 * len);
	if (ret) {
		printf("\nspi_flash_erase: FAILED\n");
		return -1;
	}
#endif

	fill_data_buf(writebuf, len);

	ret = spi_flash_write(env_flash, offset, len, writebuf);
	if (ret) {
		printf("\nspi_flash_writee: FAILED\n");
		return -2;
	}

	ret = spi_flash_read(env_flash, offset, len, readbuf);
	if (ret) {
		printf("\nspi_flash_read: FAILED\n\n");
		return -3;
	}

	if (data_buf_compare(writebuf, readbuf, len) < 0) {
		print_buf(writebuf, len, "writebuf[]={");
		print_buf(readbuf, len, "readbuf[]={");
		return -4; 
	}

	return 0;
}

static int fill_data_buf_file_data(unsigned char *buf)
{
	unsigned char databuf[] = {
		0xDA, 0x86, 0x0A, 0x00, 0x61, 0x72, 0x63, 0x68, 
		0x3D, 0x61, 0x72, 0x6D, 0x00, 0x62, 0x61, 0x75,
		0x64, 0x72, 0x61, 0x74, 0x65, 0x3D, 0x31, 0x31, 
		0x35, 0x32, 0x30, 0x30, 0x00, 0x62, 0x6F, 0x61,
		0x72, 0x64, 0x3D, 0x73, 0x75, 0x6E, 0x78, 0x69,
		0x00, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x5F, 0x6E, 
		0x61, 0x6D, 0x65, 0x3D, 0x73, 0x75, 0x6E, 0x78,
		0x69, 0x00, 0x62, 0x6F, 0x6F, 0x74, 0x5F, 0x61,
		0x5F, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x3D,
		0x6C, 0x6F, 0x61, 0x64, 0x20, 0x24, 0x7B, 0x64,
		0x65, 0x76, 0x74, 0x79, 0x70, 0x65, 0x7D, 0x20, 
		0x24, 0x7B, 0x64, 0x65, 0x76, 0x6E, 0x75, 0x6D,
		0x7D, 0x3A, 0x24, 0x7B, 0x64, 0x69, 0x73, 0x74,
		0x72, 0x6F, 0x5F, 0x62, 0x6F, 0x6F, 0x74, 0x70, 
		0x61, 0x72, 0x74, 0x7D, 0x20, 0x24, 0x7B, 0x73, 
		0x63, 0x72, 0x69, 0x70, 0x74, 0x61, 0x64, 0x64,
		0x72, 0x7D, 0x20, 0x24, 0x7B, 0x70, 0x72, 0x65,
		0x66, 0x69, 0x78, 0x7D, 0x24, 0x7B, 0x73, 0x63,
		0x72, 0x69, 0x70, 0x74, 0x7D, 0x3B, 0x20, 0x73,
		0x6F, 0x75, 0x72, 0x63, 0x65, 0x20, 0x24, 0x7B,
		0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x61, 0x64,
		0x64, 0x72, 0x7D, 0x00, 0x62, 0x6F, 0x6F, 0x74,
		0x5F, 0x65, 0x66, 0x69, 0x5F, 0x62, 0x69, 0x6E,
		0x61, 0x72, 0x79, 0x3D, 0x6C, 0x6F, 0x61, 0x64,
		0x20, 0x24, 0x7B, 0x64, 0x65, 0x76, 0x74, 0x79,
		0x70, 0x65, 0x7D, 0x20, 0x24, 0x7B, 0x64, 0x65,
		0x76, 0x6E, 0x75, 0x6D, 0x7D, 0x3A, 0x24, 0x7B,
		0x64, 0x69, 0x73, 0x74, 0x72, 0x6F, 0x5F, 0x62, 
		0x6F, 0x6F, 0x74, 0x70, 0x61, 0x72, 0x74, 0x7D,
		0x20, 0x24, 0x7B, 0x6B, 0x65, 0x72, 0x6E, 0x65,
		0x6C, 0x5F, 0x61, 0x64, 0x64, 0x72, 0x5F, 0x72,
		0x7D, 0x20, 0x65, 0x66, 0x69, 0x2F, 0x62, 0x6F
	};
	
	size_t len = sizeof(databuf) / sizeof(databuf[0]) ;

	for (size_t i = 0; i < len; ++i)
	{
    	buf[i] = databuf[i];
	}

	return len;
}

static int test_spi_read_api(void) 
{
	int ret;
	unsigned char writebuf[256] = {0};
	unsigned char readbuf[256] = {0};
	size_t len = 256;
	u32 offset = 0x7C000;
	struct udevice *new;

	/* speed and mode will be read from DT */
	ret = spi_flash_probe_bus_cs(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
				     0, 0, &new);
	if (ret) {
		printf("SPI FLASH INIT FAILED\n");
		return -1;
	}
	env_flash = dev_get_uclass_priv(new);
		
	fill_data_buf_file_data(writebuf);

	ret = spi_flash_read(env_flash, offset, 
		len, readbuf);
	if (ret) {
		return -3;
	}

	if (data_buf_compare(writebuf, readbuf, len) < 0) {
		print_buf(writebuf, len, "writebuf[]={");
		print_buf(readbuf, len, "readbuf[]={");
		return -4; 
	}

	return 0;
}

/* TODO: TILL HERE */

void env_relocate_spec(void)
{
	int ret;
	char *buf = NULL;

#if 0
	//TODO:Remove
	if (test_spi_flash() < 0)
		printf("SPI FLASH TEST FAILED\n");
#endif 

	//TODO:Remove
	if (test_spi_read_api() < 0)
		printf("SPI FLASH READ API TEST FAILED\n");

#if 0

	//TODO: Remove print
	printf("Second ENV_RELOCATE_SPEC\n");

	buf = (char *)memalign(ARCH_DMA_MINALIGN, CONFIG_ENV_SIZE);
	env_flash = spi_flash_probe(CONFIG_ENV_SPI_BUS, CONFIG_ENV_SPI_CS,
			CONFIG_ENV_SPI_MAX_HZ, CONFIG_ENV_SPI_MODE);
	if (!env_flash) {
		set_default_env("!spi_flash_probe() failed");
		if (buf)
			free(buf);
		return;
	}

	//TODO:Remove
	if (test_spi_flash() < 0)
		printf("SPI FLASH TEST FAILED\n");

#if 0
	//TODO: Remove print
	printf("env_relocate_spec: CONFIG_ENV_OFFSET:0x%X\n CONFIG_ENV_SIZE:0x%X\n", CONFIG_ENV_OFFSET, CONFIG_ENV_SIZE);
#endif

	ret = spi_flash_read(env_flash,
		CONFIG_ENV_OFFSET, CONFIG_ENV_SIZE, buf);
	if (ret) {
		set_default_env("!spi_flash_read() failed");
		goto out;
	}

#if 0
	//TODO: REMOVE
	printf("buf[%d] = {\n", CONFIG_ENV_SIZE);
	for(int i = 1; i < 4100 + 1; ++i) {
		printf("0x%X ", buf[i - 1]);
		if ((i % 16) == 0) {
			printf("\n");
		}
	}
#endif 

	ret = env_import(buf, 0);
	if (ret)
		gd->env_valid = 1;
out:
	spi_flash_free(env_flash);
	if (buf)
		free(buf);
	env_flash = NULL;
#endif 

}
#endif

int env_init(void)
{
	/* SPI flash isn't usable before relocation */
	gd->env_addr = (ulong)&default_environment[0];
	gd->env_valid = 1;

	return 0;
}


